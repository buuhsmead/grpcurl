---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: grpcurl
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    #
    # NO we only use provided ClusterTasks in OpenShift Pipelines
    #
#    pipelinesascode.tekton.dev/task: "git-clone"

    # Use maven task from hub
    #
    # pipelinesascode.tekton.dev/task-1: "maven"

    # You can add more tasks by increasing the suffix number, you can specify them as array to have multiple of them.
    # browse the tasks you want to include from hub on https://hub.tekton.dev/
    #
    # pipelinesascode.tekton.dev/task-2: "[curl, buildah]"

#    pipelinesascode.tekton.dev/task-1: "buildah"

    # How many runs we want to keep.
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source
      - name: basic-auth
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
          kind: ClusterTask
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)

      - name: build-image
        taskRef:
          name: buildah
          kind: ClusterTask
        runAfter:
            - fetch-repository
        params:
          - name: IMAGE
            value: image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/ubi8-grpcurl
          - name: DOCKERFILE
            value: "./Containerfile"
        workspaces:
          - name: source
            workspace: source

      # Customize this task if you like, or just do a taskRef
      # to one of the hub task.
      - name: noop-task
        displayName: Task with no effect
        runAfter:
          - build-image
        workspaces:
          - name: source
            workspace: source
        params:
          - name: IMAGE_URL
            type: string
            value: $(tasks.build-image.results.IMAGE_URL)
          - name: IMAGE_DIGEST
            type: string
            value: $(tasks.build-image.results.IMAGE_DIGEST)
        taskSpec:
          workspaces:
            - name: source
              workspace: source
          results:
            - name: IMAGE_AND_SHA
              description: The image and the sha as one
          steps:
            - name: noop-task
              image: registry.access.redhat.com/ubi9/ubi
              workingDir: $(workspaces.source.path)
              script: |
                id="$(params.IMAGE_URL):$(params.IMAGE_DIGEST)"
                echo ${id} | tr -d '[\n\ ]' | tee $(results.IMAGE_AND_SHA.path)

      - name: release-image
        runAfter:
          - noop-task
        taskRef:
          name: skopeo-copy
          kind: ClusterTask
        params:
          - name: srcImageURL
            value: $(tasks.noop-task.results.IMAGE_AND_SHA)
          - name: srcTLSverify
            value: 'false'
          - name: destImageURL
            value: quay.io/hdaems/ubi8-grpcurl
          - name: destTLSverify
            value: 'true'
        workspaces:
          - name: images-url
            workspace: source


  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  # This workspace will inject secret to help the git-clone task to be able to
  # checkout the private repositories
  - name: basic-auth
    secret:
      secretName: "{{ git_auth_secret }}"
